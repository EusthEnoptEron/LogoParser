%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Structured General Purpose Assignment
% LaTeX Template
%
% This template has been downloaded from:
% http://www.latextemplates.com
%
% Original author:
% Ted Pavlic (http://www.tedpavlic.com)
%
% Note:
% The \lipsum[#] commands throughout this template generate dummy text
% to fill the template out. These commands should all be removed when 
% writing assignment content.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%----------------------------------------------------------------------------------------
%	PACKAGES AND OTHER DOCUMENT CONFIGURATIONS
%----------------------------------------------------------------------------------------

\documentclass{article}
\usepackage{listings}
\usepackage{fancyhdr} % Required for custom headers
\usepackage{lastpage} % Required to determine the last page for the footer
\usepackage{extramarks} % Required for headers and footers
\usepackage{graphicx} % Required to insert images
\usepackage{lipsum} % Used for inserting dummy 'Lorem ipsum' text into the template

% Margins
\topmargin=-0.45in
\evensidemargin=0in
\oddsidemargin=0in
\textwidth=6.5in
\textheight=9.0in
\headsep=0.25in 

\linespread{1.1} % Line spacing

% Set up the header and footer
\pagestyle{fancy}
\lhead{\hmwkAuthorName} % Top left header
\chead{\hmwkClass\ (\hmwkClassInstructor\ \hmwkClassTime): \hmwkTitle} % Top center header
\rhead{\firstxmark} % Top right header
\lfoot{\lastxmark} % Bottom left footer
\cfoot{} % Bottom center footer
\rfoot{Page\ \thepage\ of\ \pageref{LastPage}} % Bottom right footer
\renewcommand\headrulewidth{0.4pt} % Size of the header rule
\renewcommand\footrulewidth{0.4pt} % Size of the footer rule

\setlength\parindent{0pt} % Removes all indentation from paragraphs

%----------------------------------------------------------------------------------------
%	DOCUMENT STRUCTURE COMMANDS
%	Skip this unless you know what you're doing
%----------------------------------------------------------------------------------------

% Header and footer for when a page split occurs within a problem environment
\newcommand{\enterProblemHeader}[1]{
\nobreak\extramarks{#1}{#1 continued on next page\ldots}\nobreak
\nobreak\extramarks{#1 (continued)}{#1 continued on next page\ldots}\nobreak
}

% Header and footer for when a page split occurs between problem environments
\newcommand{\exitProblemHeader}[1]{
\nobreak\extramarks{#1 (continued)}{#1 continued on next page\ldots}\nobreak
\nobreak\extramarks{#1}{}\nobreak
}

\setcounter{secnumdepth}{0} % Removes default section numbers
\newcounter{homeworkProblemCounter} % Creates a counter to keep track of the number of problems

\newcommand{\homeworkProblemName}{}
\newenvironment{homeworkProblem}[1][Problem \arabic{homeworkProblemCounter}]{ % Makes a new environment called homeworkProblem which takes 1 argument (custom name) but the default is "Problem #"
\stepcounter{homeworkProblemCounter} % Increase counter for number of problems
\renewcommand{\homeworkProblemName}{#1} % Assign \homeworkProblemName the name of the problem
\section{\homeworkProblemName} % Make a section in the document with the custom problem count
\enterProblemHeader{\homeworkProblemName} % Header and footer within the environment
}{
\exitProblemHeader{\homeworkProblemName} % Header and footer after the environment
}

\newcommand{\problemAnswer}[1]{ % Defines the problem answer command with the content as the only argument
\noindent\framebox[\columnwidth][c]{\begin{minipage}{0.98\columnwidth}#1\end{minipage}} % Makes the box around the problem answer and puts the content inside
}

\newcommand{\homeworkSectionName}{}
\newenvironment{homeworkSection}[1]{ % New environment for sections within homework problems, takes 1 argument - the name of the section
\renewcommand{\homeworkSectionName}{#1} % Assign \homeworkSectionName to the name of the section from the environment argument
\subsection{\homeworkSectionName} % Make a subsection with the custom name of the subsection
\enterProblemHeader{\homeworkProblemName\ [\homeworkSectionName]} % Header and footer within the environment
}{
\enterProblemHeader{\homeworkProblemName} % Header and footer after the environment
}
   
\newcommand{\inlinecode}{\texttt}
%----------------------------------------------------------------------------------------
%	NAME AND CLASS SECTION
%----------------------------------------------------------------------------------------

\newcommand{\hmwkTitle}{Logo Parser} % Assignment title
\newcommand{\hmwkDueDate}{Friday,\ June\ 13,\ 2014} % Due date
\newcommand{\hmwkClass}{AFL\ 101} % Course/class
\newcommand{\hmwkClassTime}{} % Class/lecture time
\newcommand{\hmwkClassInstructor}{} % Teacher/lecturer
\newcommand{\hmwkAuthorName}{Simon Meer (meers1)} % Your name
\newcommand{\hmwkEmail}{simon.meer@bluewin.ch}

%----------------------------------------------------------------------------------------
%	TITLE PAGE
%----------------------------------------------------------------------------------------

\title{
\vspace{2in}
\textmd{\textbf{\hmwkClass:\ \hmwkTitle}}\\
\normalsize\vspace{0.1in}\small{\hmwkDueDate}\\
\vspace{0.1in}\large{\textit{\hmwkClassInstructor\ \hmwkClassTime}}
\vspace{3in}
}

\author{\textbf{\hmwkAuthorName} \\
	\hmwkEmail
}
\date{} % Insert date here if you want it to appear below your name

%----------------------------------------------------------------------------------------

\begin{document}

\maketitle

%----------------------------------------------------------------------------------------
%	TABLE OF CONTENTS
%----------------------------------------------------------------------------------------

%\setcounter{tocdepth}{1} % Uncomment this line if you don't want subsections listed in the ToC

\newpage
\tableofcontents
\newpage

%----------------------------------------------------------------------------------------
%	PROBLEM 1
%----------------------------------------------------------------------------------------

% To have just one problem per page, simply put a \clearpage after each problem

\begin{homeworkProblem}[Introduction]

The problem at hand was to create a parser using JavaCC that recognizes the Logo language and is able to convert its code into compilable Java code. The primitives required for the presentation of the results were already provided. 

\vspace{10pt} % Question

\end{homeworkProblem}

%----------------------------------------------------------------------------------------
%	PROBLEM 2
%----------------------------------------------------------------------------------------

\begin{homeworkProblem}[Grammar] % Custom section title
No significant changes were made to the grammar, except for a few instances where inline rules were placed in external rules for easier reading because of convoluted code. These changes are \textit{insignificant} and were therefore not included in the listing below.

\begin{lstlisting}
Program    = "LOGO" Identifier { Subroutine } { Statement } "END"

Subroutine = "TO" Identifier { Parameter } { Statement } "END"

Statement  = "CS" | "PD" | "PU" | "HT" | "ST" 
           | "FD" NExpr | "BK" NExpr | "LT" NExpr | "RT" NExpr
           | "WAIT" NExpr
           | "REPEAT" NExpr "[" { Statement } "]"
           | "IF" BExpr "[" { Statement } "]"
           | "IFELSE" BExpr "[" { Statement } "]" "[" { Statement } "]"
           | Identifier { NExpr }

NExpr      = NTerm { ( "+" | "-" )  NTerm }

NTerm      = NFactor { ( "*" | "/" ) NFactor }

NFactor    = "-" ( Number | REPCOUNT | Parameter | "(" NExpr ")" ) | 
	     Number | REPCOUNT | Parameter | "(" NExpr ")" 

BExpr      = BTerm { "OR" BTerm }

BTerm      = BFactor { "AND" BFactor }

BFactor    = "TRUE" | "FALSE" | "NOT" "(" BExpr ")" 
	   | NExpr ( "==" | "!=" | "<" | ">" | "<=" | ">=" )  NExpr 

Comments start with "#" with scope until the newline

Numbers are real numbers

Identifiers start with a letter followed by letters or digits

Parameters are ":" followed by Identifier

Identifiers, parameters, keywords in uppercase only
\end{lstlisting}

%--------------------------------------------

%\begin{homeworkSection}{(a)} % Section within problem
%\lipsum[4]\vspace{10pt} % Question
%
%\problemAnswer{ % Answer
%\lipsum[5]
%}
%\end{homeworkSection}%
%
%--------------------------------------------
%
%\begin{homeworkSection}{(b)} % Section within problem
%\problemAnswer{ % Answer
%\lipsum[6]
%}
%\end{homeworkSection}

%--------------------------------------------

\end{homeworkProblem}

%----------------------------------------------------------------------------------------
%	PROBLEM 3
%----------------------------------------------------------------------------------------

\begin{homeworkProblem}[Solution] % Roman numerals

The solution is straight-forward: the grammar was implemented mostly 1:1 using the pre-defined tokens and the rules as seen in the grammar. When a control construct is being parsed, it will print the code directly into the output file, whereas mathematical expressions will return a \texttt{String} with the complete expression, carefully outlined with brackets to make sure Java follows our grammar.

In the following sections I will elaborate on specific problems.

%--------------------------------------------

\begin{homeworkSection}{REPCOUNT} % Section within problem
The REPCOUNT problem was solved using a stack. Whenever the parser enters a loop (REPEAT statement) it does the following:

\begin{enumerate}
  \item Create a temporary, \textbf{unique} variable name \textit{x}.
  \item Push \textit{x} onto the stack of REPCOUNT variables.
  \item Print out a for-loop declaration using \textit{x} as the counter variable.
\end{enumerate}

Finally, once the parser leaves the REPEAT statement, the \textit{x} is popped from the stack. This looks approximately like this:

\begin{lstlisting}[language=java]
String i = getIdentifier();
repcounts.push(i);
pw.printf("for (int %s = 0; %1$s < (int)(%s); %1$s++){\n", i, e);
\end{lstlisting}

\vspace{10pt} % Question

\end{homeworkSection}%

\begin{homeworkSection}{User Routines} % Section within problem
In order to prevent naming conflicts with reserved Java keywords, the routine names and param names are not used as is. Instead, a lookup table (i.e. a \texttt{HashMap<String, String>}) is used to map names to parser-wide unique identifiers. The code looks like this, where \texttt{getIdentifier()} is a static method that returns a unique name:

\begin{lstlisting}[language=java]
static private HashMap<String, String> variables = new HashMap();
public static String getIdentifier(String name) {
  if(variables.containsKey(name)) return variables.get(name);
  else {
    String variable = getIdentifier();
    variables.put(name, variable);
    return variable;
  }
}
\end{lstlisting}
\end{homeworkSection}%

\begin{homeworkSection}{Comments}
An additional regular expression was added to the \texttt{SKIP} list that goes like so:

\begin{lstlisting}
<COMMENT:  "#" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
\end{lstlisting}
\end{homeworkSection}
\end{homeworkProblem}
\begin{homeworkProblem}[Tests]
The solution has been successfully tested by parsing all logo files provided as well as the following demo program, which is supposed to test as many corner cases as possible:


\end{homeworkProblem}

\begin{homeworkProblem}[Limitations]
There is a counter-intuitive behavior concerning the way how parameters are parsed. Consider this example:

\begin{lstlisting}[language=logo]
LOGO PROBLEM
  TO MYROUTINE :P1 :P2
    FD :P1
    FD :P2
  END
  MYROUTINE 1 -1
  MYROUTINE 1 - 1
  MYROUTINE 1- 1
END
\end{lstlisting}

Intuitively, the first function call should translate to \texttt{MYROUTINE(1, -1)} but because of the way JavaCC works, all white spaces (\texttt{SKIP} tokens) are ignored and the calls will be considered identical, i.e. as \texttt{MYROUTINE(1-1)}.

Furthermore, the parser will do no sanity checks. That means that if the Logo code makes no sense, then it will not run properly or not even compile.
\end{homeworkProblem}
%----------------------------------------------------------------------------------------

\end{document}