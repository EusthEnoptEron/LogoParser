// $Author: meers1 $
//
// Parser and translateor of a subset of Logo into Java

options {
   FORCE_LA_CHECK = true;
   DEBUG_PARSER = true;
//   DEBUG_TOKEN_MANAGER = true;
}

PARSER_BEGIN(Logo)

import java.lang.*;
import java.io.*;
import java.util.*;

public class Logo {

  static private File javaFile, htmlFile;   // output files
  static private PrintWriter pw;            // printwriter used for every output
  static private int numIndent = 0;         // size of indentation
  static private int varCounter = 0;        // used to create unique identifiers
  static private Stack<String> repcounts = new Stack(); // Contains a stack of iteration variables (used in REPEAT statements)

  /**
   * Gets a unique identifier.
   * @return a unique identifier.
   */
  private static String getIdentifier() {
    return "i" + (varCounter++);
  }

  // to pretty-print the translation
  // uses numIndent and pw defined as static variables in LogoParser
  // writes in pw the numIndent times the indent string
  private static void indent() {
    for (int i=0; i<numIndent; i++) { pw.print("   "); }
  }

  // Main method that reads the source file ".logo" and translates it
  // into two files: ".java" ".html"
  public static void main(String args[]) throws ParseException,
                                                TokenMgrError,
                                                IOException
  {
    // reads the source file ".logo" (first argument of command line)
    BufferedReader in = new BufferedReader(new FileReader(args[0]));
    Logo parser = new Logo(in);
    try {
      parser.start();
      System.out.println("DONE");
    }
    catch (ParseException x) { System.out.println("Syntaxtic Error"); throw x; }
    catch (TokenMgrError x)  { System.out.println("Lexical Error"); throw x; }
  }
}
PARSER_END(Logo)

// skip separators
SKIP : { <" " | "\t" | "\n" | "\r" | <COMMENT>> }

// Constants, pre-defined, operators etc.
TOKEN: { <ADD: "+">   | <SUB: "-">  | <MUL: "*"> | <DIV: "/"> }
TOKEN: { <LPAR: "(">  | <RPAR: ")"> | <#PARSEP: ":"> }
TOKEN: { <LBRA: "[">  | <RBRA: "]"> }
TOKEN: { <EQ: "==">   | <NE: "!=">  }
TOKEN: { <LT: "<">    | <GT: ">">   | <LE: "<="> | <GE: ">="> }
TOKEN: { <AND: "AND"> | <OR: "OR"> }
TOKEN: { <COMMENT:  "#" (~["\n","\r"])* ("\n" | "\r" | "\r\n")> }
TOKEN: { <TRUE: "TRUE"> | <FALSE: "FALSE"> | <NOT: "NOT"> }
// REPCOUNT is a pre-defined identifier rather than a keyword
TOKEN: { <REPCOUNT: "REPCOUNT"> }
// Keywords
TOKEN: {
  <CLEARSCREEN: "CS"> |
  <PENDOWN: "PD">     | <PENUP: "PU">      |
  <FORWARD: "FD">     | <BACKWARD: "BK">   |
  <LEFTTURN: "LT">    | <RIGHTTURN: "RT">  |
  <HIDETURTLE: "HT">  | <SHOWTURTLE: "ST"> |
  <WAIT: "WAIT">      | <REPEAT: "REPEAT"> |
  <IF: "IF">          | <IFELSE: "IFELSE"> |
  <SUBROUTINE: "TO">  |
  <LOGO: "LOGO">      | <END: "END">
}
// Numerical values, identifiers, and parameters
TOKEN: { <#DIGIT:  ["0"-"9"]> }
TOKEN: { <#LETTER: ["A"-"Z"]> }
TOKEN: { <NUM:(<DIGIT>)+ | (<DIGIT>)+ "." (<DIGIT>)+ > }
TOKEN: { <IDENTIFIER: <LETTER> ( <LETTER> | <DIGIT> )* > }
TOKEN: { <PARAMETER: <PARSEP> <IDENTIFIER> > // removes parameter separator
//          { matchedToken.image=image.substring(1,image.length()); }
}



//////////////////////////////////////////////////////////////
//
//  S E T U P
//
/////////////////////////////////////////////////////////////

void start() throws IOException:
{ Token t; }
{
  // logo programs start with LOGO followed by an identifier
  <LOGO> t = <IDENTIFIER>
  // Creation of the output files
   {
     // Create the HTML file for the applet
     htmlFile = new File(t.image.toLowerCase() + ".html");
     pw = new PrintWriter(new FileOutputStream(htmlFile));
     pw.println("<html>");
     pw.println("  <body>");
     pw.println("  <applet code='" + t.image.toLowerCase() +
                ".class'width=600 height=600></applet>");
     pw.println("  </html>");
     pw.println("</body>");
     pw.close();
     //Create the Java file and the class
     javaFile = new File(t.image.toLowerCase() + ".java");
     pw = new PrintWriter(new FileOutputStream(javaFile));
     pw.println("import java.awt.Graphics;\n");
     pw.println("public class " + t.image.toLowerCase() +
                " extends java.applet.Applet {\n" );
     numIndent++;
     indent();
     pw.println("private LogoPrimitives logo;\n");
     pw.flush();
   }
  ( subroutine() )*
  // Open the necessary method "paint" of the applet
   {
     indent(); numIndent++;
     pw.println("public void paint(Graphics g) {");
     indent();
     pw.println("logo = new LogoPrimitives(this);");
     pw.println();
   }
  ( statement() )*
  // close the method "paint"
   {
     numIndent--;
     indent();
     pw.println("}");
   }
  // close the class
  <END>
   { numIndent--; indent();
     pw.println("}");
     pw.flush(); pw.close();
   }
}

void subroutine():
{
  Token t;
  int paramCount = 0; // used to keep count
}
{
  <SUBROUTINE> t=<IDENTIFIER> {
    // Start method definition of the user routine
    // -- FUNCTION SIGNATURE --
    indent();
    pw.print("void " + t.image + "(");
  }
  (
    t=<PARAMETER>{
      // Append argument (preceding comma only _after_ first one)
      if(paramCount++ > 0) pw.print(", ");
      // We could just use substring here, but this way we can discern between function/argument
      pw.print("double " + t.image.replace(":", "_") );
    }
  )*
  {
    numIndent++;
    pw.println(") {");
    // -- /FUNCTION SIGNATURE --
    // -- FUNCTION BODY --
  }
  (statement() )*
  {
    numIndent--;
    indent();
    pw.println("}");
    // -- / FUNCTION BODY ---
  }<END>
}

void statement():
{}
{
  simpleFunction() | // Functions that take no arguments
  parameterizedFunction() | // Functions with one argument
  waitFn() | // The wait function is somewhat special because it requires an integer
  userRoutine() |
  repeat() |
  ifonlyOp() | // "If" operation _without_ "else"
  ifelseOp() // "IF-Else" operation
}



//////////////////////////////////////////////////////////////
//
//  S T A T E M E N T S   (print themselves out)
//
/////////////////////////////////////////////////////////////

  void ifonlyOp():
  {
  }
  {
    // We "forward" the actual definition to a sub rule
    <IF> ifOp()
  }

  void ifelseOp():
  {
  }
  {
    <IFELSE> ifOp()
    {
      // ifOp has taken care of the if part, leaving us with if(...) { }
      // -> that's where we start:
      indent(); numIndent++;
      pw.println("else {");
    }
    <LBRA> ( statement() )* <RBRA>
    {
      numIndent--; indent();
      pw.println("}");
    }
  }

  // Defines how an "If" is composed to prevent redundancy
  void ifOp():
  {
      String condition; // String representation of the condition
  }
  {
    condition=bexpr()
    {
      indent(); numIndent++;
      pw.printf("if (%s) {\n", condition );
    }
    <LBRA> ( statement() )* <RBRA>
    {
      numIndent--; indent();
      pw.println("}");
    }
  }

  // The repeat function makes use of a stack to keep track of the current "iteration" variable.
  // Why? Because it's a perfect fit.
  void repeat():
  {
    String e; // Expression that defines the number of times
  }
  {
    <REPEAT> e=nexpr()
    {
      // Get a unique identifier (i) and push it on the stack
      String i = getIdentifier();
      repcounts.push(i);
      indent(); numIndent++;
      pw.printf("for (int %s = 0; %1$s < (int)(%s); %1$s++){\n", i, e);
    }
    <LBRA> ( statement() )* <RBRA>
    {
      // We're done, so pop the identifier off the stack.
      repcounts.pop();
      numIndent--; indent();
      pw.println("}");
    }
  }

  // Collective rule for parameterless functions
  void simpleFunction():
  {
    Token t; // Token
  }
  {
    (t=<CLEARSCREEN>| t=<PENDOWN>| t=<PENUP>|t=<HIDETURTLE>|t=<SHOWTURTLE>)
    {
      indent();
      pw.printf("logo.%s();\n", t.image.toLowerCase());
    }
  }

  // Collective rule for functions with a parameter
  void parameterizedFunction():
  {
    Token t;  // Token
    String arg;  // Parameter
  }
  {
    (t=<FORWARD>|t=<BACKWARD>|t=<LEFTTURN>|t=<RIGHTTURN>) arg=nexpr()
    {
      indent();
      pw.printf("logo.%s(%s);\n", t.image.toLowerCase(), arg);
    }
  }

  // Rule for the wait functions. Requires an integer for its parameter.
  void waitFn():
  {
    Token t; // Token
    String arg; // Parameter
  }
  {
   t=<WAIT> arg=nexpr()
    {
      indent();
      pw.printf("logo.%s((int)(%s));\n", t.image.toLowerCase(), arg);
    }
  }

  // Rule for invocations of user routines
  void userRoutine():
  {
    Token t;
    String param;
    int paramCount = 0;
  }
  {
    // Handle signature...
    t=<IDENTIFIER>
    {
      indent();
      pw.printf("this.%s(", t.image);
    }

    // Handle params...
    (
      param=nexpr()
      {
        if(paramCount++ > 0)
          pw.print(", ");
        pw.print( param );
      }
    )*

    // Close...
    {
      pw.println(");");
    }
  }


//////////////////////////////////////////////////////////////
//
//  T E R M S (return a string)
//
/////////////////////////////////////////////////////////////

  // Numeric expression
  String nexpr():
  {
    String expression;
    String t2;
    Token op;
  }
  {
    expression = nterm()
    {
      expression = "(" + expression + ")";
    }
    (
      (op=<ADD>|op=<SUB>) t2 = nterm()
      {
        expression += op.image + "(" + t2 + ")";
      }
    )*
    {
      return expression;
    }
  }

  // Numeric term
  String nterm():
  {
    String expression = "";
    String factor;
    Token t;
  }
  {
    expression = nfactor()
    {
      expression = "(" + expression + ")";
    }
    (
      (t=<MUL>|t=<DIV>) factor=nfactor()
      {
        expression += t.image + "(" + factor + ")";
      }
    )*
    {
      return expression;
    }
  }

  // Numeric factor
  String nfactor():
  {
    Token t = null;
    String expr = "";
  }
  {
    // Will explode and kill puppies if you call "myroutine 1 -1"
    // Read: it's an ambiguity and can't so easily be resolved with a lookahead (I tried)
    (<SUB>)?
    (t=<NUM> | <REPCOUNT> { expr = repcounts.peek(); } | t=<PARAMETER> { expr =  t.image.replace(":", "_"); t = null; }| <LPAR> expr=nexpr() <RPAR>)
    {
      if(t != null)
        return t.image;
      else
        return "(" + expr + ")";
    }
  }

  // Boolean expression
  String bexpr():
  {
    // For left and right. "l" will eventually contain the entire string.
    String l, r;
  }
  {
    l = bterm()
    {
      // Start with the left part
      l = "(" + l + ")";
    }
    // Join with ORs
    (
      <OR> r = bterm()
      {
        l += " || (" +r+")";
      }
    )*
    {
      return l;
    }
  }

  // Boolean term
  String bterm():
  {
    // For left and right. "l" will eventually contain the entire string.
    String l, r;
  }
  {
    l = bfactor()
    {
      l = "("+l+")";
    }
    (
      <AND> r = bfactor()
      {
        l += " && ("+r+")";
      }
    )*
    {
      return l;
    }
  }


  // Boolean factor
  String bfactor():
  {
    Token t;
    String result;
    String n1, n2;
  }
  {
    <TRUE> { return "true"; } |
    <FALSE> { return "false"; } |
    <NOT> <LPAR> result = bexpr() <RPAR>
    {
      return "!" + result;
    }|
    n1 = nexpr() ( t=<EQ> | t=<NE> | t=<LT> | t=<GT> | t=<LE> | t=<GE> ) n2 = nexpr()
    {
      return n1 + t.image + n2;
    }
  }
