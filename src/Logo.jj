// $Author: beo1 $
// $Id: Logo.jj 1354 2012-12-05 14:28:28Z beo1 $
//
// Parser and translateor of a subset of Logo into Java

options {
   FORCE_LA_CHECK = true;
   DEBUG_PARSER = true;
//   DEBUG_TOKEN_MANAGER = true;
}

PARSER_BEGIN(Logo)

import java.lang.*;
import java.io.*;
import java.util.*;

public class Logo {

  static private File javaFile, htmlFile;   // output files
  static private PrintWriter pw;            // printwriter used for every output
  static private int numIndent = 0;         // size of indentation
  static private int varCounter = 0;
  static private HashMap<String, String> variables = new HashMap();
  static private Stack<String> repcounts = new Stack();


  public static String getIdentifier(String name) {
    if(variables.containsKey(name)) return variables.get(name);
    else {
        String variable = getIdentifier();
        variables.put(name, variable);
        return variable;
    }
  }



  public static String getIdentifier() {
    return "i" + (varCounter++);
  }

  // to pretty-print the translation
  // uses numIndent and pw defined as static variables in LogoParser
  // writes in pw the numIndent times the indent string
  public static void indent() {
    for (int i=0; i<numIndent; i++) { pw.print("   "); }
  }

  // Main method that reads the source file ".logo" and translates it
  // into two files: ".java" ".html"
  public static void main(String args[]) throws ParseException,
                                                TokenMgrError,
                                                IOException
  {
    // reads the source file ".logo" (first argument of command line)
    BufferedReader in = new BufferedReader(new FileReader(args[0]));
    Logo parser = new Logo(in);
    try {
      parser.start();
      System.out.println("DONE");
    }
    catch (ParseException x) { System.out.println("Syntaxtic Error"); throw x; }
    catch (TokenMgrError x)  { System.out.println("Lexical Error"); throw x; }
  }
}
PARSER_END(Logo)

// skip separators
SKIP : { <" " | "\t" | "\n" | "\r" | <COMMENT>> }

// Constants, pre-defined, operators etc.
TOKEN: { <ADD: "+">   | <SUB: "-">  | <MUL: "*"> | <DIV: "/"> }
TOKEN: { <LPAR: "(">  | <RPAR: ")"> | <#PARSEP: ":"> }
TOKEN: { <LBRA: "[">  | <RBRA: "]"> }
TOKEN: { <EQ: "==">   | <NE: "!=">  }
TOKEN: { <LT: "<">    | <GT: ">">   | <LE: "<="> | <GE: ">="> }
TOKEN: { <AND: "AND"> | <OR: "OR"> }
TOKEN: { <COMMENT:  "#" (~["\n"])*> }
TOKEN: { <TRUE: "TRUE"> | <FALSE: "FALSE"> | <NOT: "NOT"> }
// REPCOUNT is a pre-defined identifier rather than a keyword
TOKEN: { <REPCOUNT: "REPCOUNT"> }
// Keywords
TOKEN: {
  <CLEARSCREEN: "CS"> |
  <PENDOWN: "PD">     | <PENUP: "PU">      |
  <FORWARD: "FD">     | <BACKWARD: "BK">   |
  <LEFTTURN: "LT">    | <RIGHTTURN: "RT">  |
  <HIDETURTLE: "HT">  | <SHOWTURTLE: "ST"> |
  <WAIT: "WAIT">      | <REPEAT: "REPEAT"> |
  <IF: "IF">          | <IFELSE: "IFELSE"> |
  <SUBROUTINE: "TO">  |
  <LOGO: "LOGO">      | <END: "END">
}
// Numerical values, identifiers, and parameters
TOKEN: { <#DIGIT:  ["0"-"9"]> }
TOKEN: { <#LETTER: ["A"-"Z"]> }
TOKEN: { <NUM:(<DIGIT>)+ | (<DIGIT>)+ "." (<DIGIT>)+ > }
TOKEN: { <IDENTIFIER: <LETTER> ( <LETTER> | <DIGIT> )* > }
TOKEN: { <PARAMETER: <PARSEP> <IDENTIFIER> > // removes parameter separator
//          { matchedToken.image=image.substring(1,image.length()); }
}

void start() throws IOException:
{ Token t; }
{
  // logo programs start with LOGO followed by an identifier
  <LOGO> t = <IDENTIFIER>
  // Creation of the output files
   {
     // Create the HTML file for the applet
     htmlFile = new File(t.image.toLowerCase() + ".html");
     pw = new PrintWriter(new FileOutputStream(htmlFile));
     pw.println("<html>");
     pw.println("  <body>");
     pw.println("  <applet code='" + t.image.toLowerCase() +
                ".class'width=600 height=600></applet>");
     pw.println("  </html>");
     pw.println("</body>");
     pw.close();
     //Create the Java file and the class
     javaFile = new File(t.image.toLowerCase() + ".java");
     pw = new PrintWriter(new FileOutputStream(javaFile));
     pw.println("import java.awt.Graphics;\n");
     pw.println("public class " + t.image.toLowerCase() +
                " extends java.applet.Applet {\n" );
     numIndent++;
     indent();
     pw.println("private LogoPrimitives logo;\n");
     pw.flush();
   }
  ( subroutine() )*
  // Open the necessary method "paint" of the applet
   {
     indent(); numIndent++;
     pw.println("public void paint(Graphics g) {");
     indent();
     pw.println("logo = new LogoPrimitives(this);");
     pw.println();
   }
  ( statement() )*
  // close the method "paint"
   {
     numIndent--;
     indent();
     pw.println("}");
   }
  // close the class
  <END>
   { numIndent--; indent();
     pw.println("}");
     pw.flush(); pw.close();
   }
}

void subroutine():
{
    Token t;
    int paramCount = 0;
}
{
    <SUBROUTINE> t=<IDENTIFIER> {
        indent();
        pw.print("void " + getIdentifier(t.image) + "(");
    }
    (
        t=<PARAMETER>{
            if(paramCount++ > 0)
                pw.print(", ");
            pw.print("double " + getIdentifier(t.image.substring(1)) );
        }
    )*
    {
        numIndent++;
        pw.println(") {");
    }
    (statement() )*
    {
        numIndent--;
        indent();
        pw.println("}");
    }<END>
}

void statement():
{}
{
  simpleFunction() |
  parameterizedFunction() |
  waitFn() |
  userRoutine() |
  repeat() |
  ifonlyOp() |
  ifelseOp()
}

void ifonlyOp():
{
}
{
    <IF> ifOp()
}

void ifelseOp():
{
}
{
    <IFELSE> ifOp()
    {
        indent(); numIndent++;
        pw.println("else {");
    }
    <LBRA> ( statement() )* <RBRA>
    {
        numIndent--; indent();
        pw.println("}");
    }
}

void ifOp():
{
    String condition;
}
{
  condition=bexpr()
  {
    indent(); numIndent++;
    pw.printf("if (%s) {\n", condition );
  }
  <LBRA> ( statement() )* <RBRA>
  {
    numIndent--; indent();
    pw.println("}");
  }
}

void repeat():
{
    String e;
}
{
    <REPEAT> e=nexpr()
    {
        String i = getIdentifier();
        repcounts.push(i);
        indent(); numIndent++;
        pw.printf("for (int %s = 0; %1$s < (int)(%s); %1$s++){\n", i, e);
    }
    <LBRA> ( statement() )* <RBRA>
    {
        repcounts.pop();
        numIndent--; indent();
        pw.println("}");
    }
}

void simpleFunction():
{
    Token t;
}
{
    (t=<CLEARSCREEN>| t=<PENDOWN>| t=<PENUP>|t=<HIDETURTLE>|t=<SHOWTURTLE>)
    {
        indent();
        pw.printf("logo.%s();\n", t.image.toLowerCase());
    }
}

void parameterizedFunction():
{
    Token t;
    String p;
}
{
    (t=<FORWARD>|t=<BACKWARD>|t=<LEFTTURN>|t=<RIGHTTURN>) p=nexpr()
    {
        indent();
        pw.printf("logo.%s(%s);\n", t.image.toLowerCase(), p);
    }
}

void waitFn():
{
    Token t;
    String p;
}
{
 t=<WAIT> p=nexpr()
    {
        indent();
        pw.printf("logo.%s((int)(%s));\n", t.image.toLowerCase(), p);
    }
}

void userRoutine():
{
    Token t;
    String param;
  int paramCount = 0;
}
{
    t=<IDENTIFIER>
    {
        indent();
        pw.printf("this.%s(", getIdentifier(t.image));
    }
    (
        param=nexpr()
        {
            if(paramCount++ > 0)
                pw.print(", ");
            pw.print( param );
        }
    )*
    {
        pw.println(");");
    }
}


String nexpr():
{
    String expression;
    String t2;
    Token op;
}
{
    expression = nterm()
    {
        expression = "(" + expression + ")";
    }
    (
        (op=<ADD>|op=<SUB>) t2 = nterm()
        {
            expression += op.image + "(" + t2 + ")";
        }
    )*
    {
        return expression;
    }
}

String nterm():
{
    String expression = "";
    String factor;
    Token t;
}
{
    expression = nfactor()
    {
        expression = "(" + expression + ")";
    }
    (
        (t=<MUL>|t=<DIV>) factor=nfactor()
        {
            expression += t.image + "(" + factor + ")";
        }
    )*
    {
        return expression;
    }
}

String nfactor():
{
    Token t = null;
    String expr = "";
}
{
    // Not implementable because of cases like "MYROUTINE 1 -1"
    //(<SUB>)?
    (t=<NUM> | <REPCOUNT> { expr = repcounts.peek(); } | t=<PARAMETER> { expr = getIdentifier(t.image.substring(1)); t = null; }| <LPAR> expr=nexpr() <RPAR>)
    {
        if(t != null)
            return t.image;
        else
            return "(" + expr + ")";
    }
}

String bexpr():
{
    String l, r;
}
{
    l = bterm()
    {
        l = "(" + l + ")";
    }
    (
        <OR> r = bterm()
        {
            l += " || (" +r+")";
        }
    )*
    {
        return l;
    }
}

String bterm():
{
    String l, r;
}
{
    l = bfactor()
    {
        l = "("+l+")";
    }
    (
        <AND> r = bfactor()
        {
            l += " && ("+r+")";
        }
    )*
    {
        return l;
    }
}

String bfactor():
{
    Token t;
    String result;
    String n1, n2;
}
{
    <TRUE> { return "true"; } |
    <FALSE> { return "false"; } |
    <NOT> <LPAR> result = bexpr() <RPAR>
    {
       return "!" + result;
    }|
    n1 = nexpr() ( t=<EQ> | t=<NE> | t=<LT> | t=<GT> | t=<LE> | t=<GE> ) n2 = nexpr()
    {
        return n1 + t.image + n2;
    }
}


// ADD THE REST OF THE JAVACC RULES WITH THE JAVA CODE
